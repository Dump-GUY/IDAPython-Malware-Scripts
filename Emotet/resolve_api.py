import json
import idaapi
import idc
import idautils

def hashing(str_to_hash, type=0, xor=0x1E5C48DE):
    x = 0
    for i in range(len(str_to_hash)):
        x_old = x
        shift_int_1 = 0x6
        shift_int_2 = 0x10

        y = x << shift_int_1 & 0xFFFFFFFF
        z = x << shift_int_2 & 0xFFFFFFFF

        data = ord(str_to_hash[i])
        if data <= 0x5A and type > 0:
            data += 0x20

        x = data
        x += y
        x += z
        if type > 0:
            x += x_old
        else:
            x -= x_old
        x = x & 0xFFFFFFFF

    return x ^ xor


def setup(json_file):
    global export_hashes
    exports_json = json.loads(open(json_file, 'rb').read())
    exports_list = exports_json['exports']
    for export in exports_list:
        api_hash = hashing(export)
        export_hashes[api_hash] = export


def resolve_all_APIs(resolve_ea, type = 0):
    global export_hashes
    if resolve_ea is None:
        print('resolve fails..')
        return

    if type == 1:
        resolve_ea = 0x100229C4
        for ref in idautils.CodeRefsTo(resolve_ea, 1):
            curr_ea = ref

            hash_val = -1
        #  mov     edx, 0C2D65D8Dh
            while True:
                prev_instruction_ea = idc.prev_head(curr_ea)
                if 'mov' in str(idc.GetDisasm(prev_instruction_ea)) and 'edx' in str(idc.GetDisasm(prev_instruction_ea)):
                    hash_val = idc.get_operand_value(prev_instruction_ea, 1)
                    break
                curr_ea = prev_instruction_ea
            print(hex(ref), hex(hash_val))
            if hash_val in export_hashes:
                print(hex(ref), export_hashes[hash_val])
                idc.set_cmt(ref, export_hashes[hash_val], 0)
        return
    for ref in idautils.CodeRefsTo(resolve_ea, 1):
        curr_ea = ref

        func_args = []
        while len(func_args) < 5:
            prev_instruction_ea = idc.prev_head(curr_ea)
            if idc.print_insn_mnem(prev_instruction_ea) == 'push':
                func_args.append(idc.get_operand_value(prev_instruction_ea, 0))
            curr_ea = prev_instruction_ea
        
        if func_args[4] != 1:
            if func_args[4] in export_hashes:
                #  print(hex(curr_ea), export_hashes[func_args[4]])
                idc.set_cmt(ref, export_hashes[func_args[4]], 0)
            #  else:
                #  print(hex(curr_ea), 'NOT FOUND', func_args)

export_hashes = {}      
setup('C:\\Users\\chuon\\Desktop\\ReverseEngineering\\Emotet\\exports.json')

print(export_hashes)

# change the address in the parameter to the address of the function resolving the API
resolve_all_APIs(0x1001CDA7)
resolve_all_APIs(1, type=1)
# exception 0x10022a30
