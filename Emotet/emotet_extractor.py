import pefile
import struct

class EmotetExtractor:
    def __init__(self, filename):
        self.pe = pefile.PE(filename)
        self.data = open(filename, 'rb').read()
        self.string_list = []
        self.C2_URL_list = []

    def decode_strings(self):
        result_str = ''
        text_sect_rva, text_sect_size = self.get_section('.text')
        if text_sect_rva == -1:
            print('Fails to decode strings')
            return
        text_sect_offset = self.pe.get_offset_from_rva(text_sect_rva)

        curr_offset = text_sect_offset

        while True:
            buffer = []
            xor_key = struct.unpack('<I', self.get_data_from_offset(curr_offset ,4))[0]
            string_length = xor_key ^ struct.unpack('<I', self.get_data_from_offset(curr_offset + 4, 4))[0]
            curr_offset += 8
            xor_key = [each for each in struct.pack('i', xor_key)]
            for i in range(string_length):
                buffer.append(xor_key[i % len(xor_key)] ^ self.data[curr_offset + i])
            if ''.join([chr(each) for each in buffer[:4]]) in ['ECS1', 'ECK1']:
                result_str = buffer
            else:
                result_str = ''.join([chr(each) for each in buffer])
            self.string_list.append(result_str)
            curr_offset += string_length
            curr_offset = self.find_next_string_blob(curr_offset)
            if curr_offset == -1:
                break
    def get_data_from_offset(self, offset, byte_count):
        return self.data[offset:offset + byte_count]

    def find_next_string_blob(self, curr_offset):
        original_offset = curr_offset
        while curr_offset % 8 != 0:
            curr_offset += 1
        while True:
            xor_key = struct.unpack('<I', self.get_data_from_offset(curr_offset ,4))[0]
            string_length = xor_key ^ struct.unpack('<I', self.get_data_from_offset(curr_offset + 4, 4))[0]
            #  print('Next string length: ' + hex(string_length))
            if string_length != 0 and string_length <= 0x100:
                break
            curr_offset += 4
        return curr_offset if curr_offset - original_offset <= 0x100 else -1


    def get_section(self, section_name):
        for section in self.pe.sections:
            if section.Name.replace(b'\x00', b'').decode('utf-8') == section_name:
                return (section.VirtualAddress, section.SizeOfRawData)
        return (-1, -1)

    def get_C2_config(self):
        section_rva, section_size = self.get_section('.data')
        data_sect_offset = self.pe.get_offset_from_rva(section_rva)
        curr_offset = data_sect_offset
        xor_key = struct.unpack('<I',
                self.get_data_from_offset(curr_offset, 4))[0]
        buffer_len = xor_key ^ struct.unpack('<I',
                self.get_data_from_offset(curr_offset + 4, 4))[0]

        curr_offset += 8
        C2_config_buffer = []
        xor_key = [each for each in struct.pack('i', xor_key)]
        for i in range(buffer_len):
            C2_config_buffer.append(xor_key[i % len(xor_key)] ^
                    self.data[curr_offset + i])

        for i in range(0, len(C2_config_buffer), 8):
            current_url = ''
            # add ip to string
            for y in range(4):
                current_url += str(C2_config_buffer[i + y]) + '.'

            current_url = current_url[:-1]
            # add port to string

            current_url += ':' + str(C2_config_buffer[i + 5] |
                    C2_config_buffer[i + 4] << 8)

            self.C2_URL_list.append(current_url)

    def display(self):
        print('-----------------------------------')
        print('Encoded string list:')

        print('ECS1 key:')
        print(b''.join([each.to_bytes(1, 'little') for each in
            self.string_list[0]]))
        print('**********************')
        print('ECK1 key:')
        print(b''.join([each.to_bytes(1, 'little') for each in
            self.string_list[1]]))
        print('**********************')
        for i in range(2, len(self.string_list)):
            print(self.string_list[i])
        print('-----------------------------------')
        print('C2 URL list:')
        for url in self.C2_URL_list:
            print(url)
emotetExtractor = EmotetExtractor('emotet.mal_')

emotetExtractor.decode_strings()

emotetExtractor.get_C2_config()
emotetExtractor.display()

