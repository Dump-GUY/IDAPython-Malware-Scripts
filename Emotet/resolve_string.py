import idaapi
import idc
import idautils
import struct
def resolve_all_strings(resolve_ea, type=0):
    if resolve_ea is None:
        print('resolve fails..')
        return

    if type == 1:
        resolve_ea = 0x1001FABB
        for ref in idautils.CodeRefsTo(resolve_ea, 1):
            encoded_string_ea = 0
            curr_ea = ref
            while True:
                prev_instruction_ea = idc.prev_head(curr_ea)
                if 'mov' in str(idc.GetDisasm(prev_instruction_ea)) and 'ecx' in str(idc.GetDisasm(prev_instruction_ea)):
                    encoded_string_ea = idc.get_operand_value(prev_instruction_ea, 1)
                    break
                curr_ea = prev_instruction_ea
            if encoded_string_ea != 1:
                decoded_string= get_string(encoded_string_ea)
                idc.set_cmt(ref, decoded_string, 0)
        return
    for ref in idautils.CodeRefsTo(resolve_ea, 1):
        curr_ea = ref
        
        stop_count = 0
        encoded_string_ea = 0
        while stop_count < 2:
            prev_instruction_ea = idc.prev_head(curr_ea)
            if idc.print_insn_mnem(prev_instruction_ea) == 'push':
                if stop_count == 1:
                    encoded_string_ea = idc.get_operand_value(prev_instruction_ea, 0)
                stop_count += 1

            curr_ea = prev_instruction_ea
        if encoded_string_ea != 1:
            decoded_string = get_string(encoded_string_ea)
            print(hex(curr_ea), decoded_string)
            idc.set_cmt(ref, decoded_string, 0)

def get_string(encoded_string_ea):
    result = ''
    xor_key = idc.get_wide_dword(encoded_string_ea) 
    string_length = xor_key ^ idc.get_wide_dword(encoded_string_ea + 4)
    encoded_string_ea += 8
    xor_key = [each for each in struct.pack('i', xor_key)]
    for i in range(string_length):
        curr_char = xor_key[i % len(xor_key)] ^ idc.get_wide_byte(encoded_string_ea + i)
        result += chr(curr_char)
    return result

#  resolve_all_strings(0x10017AF5)
resolve_all_strings(12, 1)
# exception 0x1001fb2b 












