import idaapi, idc, idautils
import json
import string_resolve

#  print(resolve_string(0x7c3))

HASHING_BUFFER = [  0x00, 0x00, 0x00, 0x00, 0x64, 0x10, 0xB7, 0x1D, 0xC8, 0x20, 
  0x6E, 0x3B, 0xAC, 0x30, 0xD9, 0x26, 0x90, 0x41, 0xDC, 0x76, 
  0xF4, 0x51, 0x6B, 0x6B, 0x58, 0x61, 0xB2, 0x4D, 0x3C, 0x71, 
  0x05, 0x50, 0x20, 0x83, 0xB8, 0xED, 0x44, 0x93, 0x0F, 0xF0, 
  0xE8, 0xA3, 0xD6, 0xD6, 0x8C, 0xB3, 0x61, 0xCB, 0xB0, 0xC2, 
  0x64, 0x9B, 0xD4, 0xD2, 0xD3, 0x86, 0x78, 0xE2, 0x0A, 0xA0, 
  0x1C, 0xF2, 0xBD, 0xBD, 0x5A, 0x00, 0x00, 0x00, 0x4C, 0x0E, 
  0x00, 0x00]

def hashing_buffer_index(offset):
    offset *= 4
    result = HASHING_BUFFER[offset]
    result += HASHING_BUFFER[offset + 1] << 8
    result += HASHING_BUFFER[offset + 2] << 16
    result += HASHING_BUFFER[offset + 3] << 24
    return result

def hashing(input_string, xor_val):
    xor_val = (~xor_val) & 0xFFFFFFFF
    if len(input_string) == 0:
        return -1
    for each in input_string:
        each = ord(each)
        v7 = hashing_buffer_index((each ^ xor_val) & 0xF) ^ ((each ^ xor_val) >> 4)
        xor_val = hashing_buffer_index(v7 & 0xF) ^ (v7 >> 4)
    return (~xor_val & 0xFFFFFFFF) ^ 0x218FE95B

def setup(json_file):
    global export_hashes
    exports_json = json.loads(open(json_file, 'rb').read())
    exports_list = exports_json['exports']
    for export in exports_list:
        api_hash = hashing(export, 0)
        export_hashes[api_hash] = export


def generate_API_struct(library_offset, API_hash_table_ea, API_count):
    result = 'struct '
    result += string_resolve.resolve_string(library_offset).replace('.', '_')
    result += "_table {\n"

    for i in range(0, int(API_count / 4)):
        hash_val = idc.get_wide_dword(API_hash_table_ea + i * 4)
        if hash_val not in export_hashes:
            #  print('[xxxxxxxxxx]', hex(hash_val), 'not found')
            result += "DWORD unknown" + str(i) + ';\n'
        else:
            #  print(hex(hash_val), export_hashes[hash_val])
            result += "DWORD " + export_hashes[idc.get_wide_dword(API_hash_table_ea + i * 4)] + ';\n'
    return result + '}'


export_hashes = {}
setup('C:\\Users\\chuon\\Desktop\\ReverseEngineering\\qakbot_debugger\\Qakbot Debugger\\exports.json')
export_hashes[0xca2ce4dc] = 'InterlockedCompareExchange'
print(generate_API_struct(1805, 0x7006E868, 8))







